{"fileName":"\\contracts\\VerificationContractFactory.sol","name":"VerificationContractFactory","abi":[{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createPhoneVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"},{"name":"accountFieldName","type":"string"}],"name":"createBaseVerificationContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"createdContracts","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"string"}],"name":"getVerificationContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createEmailVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createDocumentVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"contextStorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"source":"pragma solidity ^0.4.23;\r\n\r\n\r\nimport \"./openzeppelin-solidity/Ownable.sol\";\r\nimport \"./BaseVerification.sol\";\r\nimport \"./AccountStorageAdapter.sol\";\r\nimport \"./KimlicContractsContext.sol\";\r\nimport \"./WithKimlicContext.sol\";\r\nimport \"./KimlicToken.sol\";\r\n\r\ncontract VerificationContractFactory is WithKimlicContext {\r\n    /// public attributes ///\r\n    mapping(address=>bool) public createdContracts;\r\n\r\n    /// private attributes ///\r\n    mapping(string=>address) private contracts;\r\n\r\n    /// Constructors ///\r\n    constructor(address contextStorage) public WithKimlicContext(contextStorage) {\r\n    }\r\n\r\n    /// public methods ///\r\n    function getVerificationContract(string key) view public returns (address) {\r\n        return contracts[key];\r\n    }\r\n\r\n    //obsolete method, use createBaseVerificationContract.\r\n    function createEmailVerification(address account, address attestationPartyAddress, string key) public {\r\n        createBaseVerificationContract(account, attestationPartyAddress, key, \"email\");\r\n    }\r\n\r\n    //obsolete method, use createBaseVerificationContract.\r\n    function createPhoneVerification(address account, address attestationPartyAddress, string key) public {\r\n        createBaseVerificationContract(account, attestationPartyAddress, key, \"phone\");\r\n    }\r\n\r\n    //obsolete method, use createBaseVerificationContract.\r\n    function createDocumentVerification(address account, address attestationPartyAddress, string key) public {\r\n        createBaseVerificationContract(account, attestationPartyAddress, key, \"documents.id_card\");\r\n    }\r\n    \r\n    function createBaseVerificationContract(address account, address attestationPartyAddress, string key, string accountFieldName) public {\r\n        KimlicContractsContext context = getContext();\r\n\r\n        AccountStorageAdapter accountStorageAdapter = context.getAccountStorageAdapter();\r\n        uint dataIndex = accountStorageAdapter.getFieldHistoryLength(account, accountFieldName);\r\n        require(dataIndex > 0, \"Data is empty\");\r\n\r\n        bool verificationContractAlreadyExist = context.getAccountStorageAdapter()\r\n            .getIsFieldVerificationContractExist(account, accountFieldName, dataIndex);\r\n        require(!verificationContractAlreadyExist, \"Verification contract for this data already created\");\r\n\r\n        require(\r\n            context.getAttestationPartyStorageAdapter().getIsFieldVerificationAllowed(attestationPartyAddress, accountFieldName),\r\n            \"provided attestation party have not access to this field verification\");\r\n\r\n        uint rewardAmount = context.getVerificationPriceList().getPrice(accountFieldName);\r\n\r\n        BaseVerification createdContract = new BaseVerification(_storage, rewardAmount, account, msg.sender, dataIndex, accountFieldName);\r\n        createdContract.transferOwnership(attestationPartyAddress);\r\n\r\n        address createdContractAddress = address(createdContract);\r\n        createdContracts[createdContractAddress] = true;\r\n        contracts[key] = createdContractAddress;\r\n        context.getKimlicToken().transferFrom(msg.sender, createdContractAddress, rewardAmount);\r\n        \r\n        context.getAccountStorageAdapter().setFieldVerificationContractAddress(account, accountFieldName, dataIndex, createdContractAddress);\r\n    }\r\n}\r\n","abiDocs":[{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createPhoneVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"createPhoneVerification(address,address,string)","signatureHash":"16b5a81a"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"},{"name":"accountFieldName","type":"string"}],"name":"createBaseVerificationContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"createBaseVerificationContract(address,address,string,string)","signatureHash":"1d276977"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"createdContracts","payable":false,"stateMutability":"view","type":"function","signature":"createdContracts(address)","signatureHash":"3b562a6d"},{"constant":true,"inputs":[{"name":"key","type":"string"}],"name":"getVerificationContract","payable":false,"stateMutability":"view","type":"function","notice":"public methods ///\r","signature":"getVerificationContract(string)","signatureHash":"8575e5a5"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createEmailVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"createEmailVerification(address,address,string)","signatureHash":"b1b5dcf5"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createDocumentVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"createDocumentVerification(address,address,string)","signatureHash":"c3e2ddb1"},{"inputs":[{"name":"contextStorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]}
