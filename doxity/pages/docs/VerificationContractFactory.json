{"author":"Bohdan Grytsenko\r","title":"Factory contract for data verification process\r","fileName":"\\contracts\\VerificationContractFactory.sol","name":"VerificationContractFactory","abi":[{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createPhoneVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"},{"name":"accountFieldName","type":"string"}],"name":"createBaseVerificationContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"createdContracts","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"string"}],"name":"getVerificationContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"filedName","type":"string"}],"name":"getTokensLockPeriod","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createEmailVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createDocumentVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"filedName","type":"string"},{"name":"lockPeriod","type":"uint256"}],"name":"setTokensLockPeriod","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"contextStorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"source":"pragma solidity ^0.4.23;\r\n\r\n\r\nimport \"./openzeppelin-solidity/Ownable.sol\";\r\nimport \"./BaseVerification.sol\";\r\nimport \"./AccountStorageAdapter.sol\";\r\nimport \"./KimlicContractsContext.sol\";\r\nimport \"./WithKimlicContext.sol\";\r\nimport \"./KimlicToken.sol\";\r\n\r\n/// @title Factory contract for data verification process\r\n/// @author Bohdan Grytsenko\r\n/// @notice Produces verification contract for each case of client attribute verification requested\r\ncontract VerificationContractFactory is WithKimlicContext {\r\n    /// public attributes ///\r\n    mapping(address=>bool) public createdContracts;\r\n\r\n    /// private attributes ///\r\n    mapping(string=>address) private contracts;\r\n    mapping(string=>uint) private tokensLockPeriod;\r\n\r\n    /// Constructors ///\r\n    constructor(address contextStorage) public WithKimlicContext(contextStorage) {\r\n    }\r\n\r\n    /// @notice returns tokens lock period for specific attribute\r\n    /// @param filedName attribute code\r\n    /// @return tokens lock period for specific attribute in seconds    \r\n    function getTokensLockPeriod(string filedName) view public returns (uint) {\r\n        return tokensLockPeriod[filedName];\r\n    }\r\n\r\n    /// @notice defines tokens lock period for specific attribute\r\n    /// @param filedName attribute code\r\n    /// @param lockPeriod tokens lock period for specific attribute in seconds\r\n    function setTokensLockPeriod(string filedName, uint lockPeriod) public returns (uint) {\r\n        tokensLockPeriod[filedName] = lockPeriod;\r\n    }\r\n\r\n    /// @notice returns address of created contract\r\n    /// @param key random string speficied at creation\r\n    function getVerificationContract(string key) view public returns (address) {\r\n        return contracts[key];\r\n    }\r\n\r\n    //obsolete method, use createBaseVerificationContract.\r\n    function createEmailVerification(address account, address attestationPartyAddress, string key) public {\r\n        createBaseVerificationContract(account, attestationPartyAddress, key, \"email\");\r\n    }\r\n\r\n    //obsolete method, use createBaseVerificationContract.\r\n    function createPhoneVerification(address account, address attestationPartyAddress, string key) public {\r\n        createBaseVerificationContract(account, attestationPartyAddress, key, \"phone\");\r\n    }\r\n\r\n    //obsolete method, use createBaseVerificationContract.\r\n    function createDocumentVerification(address account, address attestationPartyAddress, string key) public {\r\n        createBaseVerificationContract(account, attestationPartyAddress, key, \"documents.id_card\");\r\n    }\r\n    \r\n    /// @notice creates verification contract for specific client and attribute\r\n    /// @param account user account address\r\n    /// @param attestationPartyAddress Attestation party address which going to perform verification\r\n    /// @param key random string, used to receive created contract address\r\n    /// @param accountFieldName attribute code\r\n    function createBaseVerificationContract(address account, address attestationPartyAddress, string key, string accountFieldName) public {\r\n        KimlicContractsContext context = getContext();\r\n\r\n        AccountStorageAdapter accountStorageAdapter = context.getAccountStorageAdapter();\r\n        uint dataIndex = accountStorageAdapter.getFieldHistoryLength(account, accountFieldName);\r\n        require(dataIndex > 0, \"Data is empty\");\r\n\r\n        bool verificationContractAlreadyExist = context.getAccountStorageAdapter()\r\n            .getIsFieldVerificationContractExist(account, accountFieldName, dataIndex);\r\n        require(!verificationContractAlreadyExist, \"Verification contract for this data already created\");\r\n\r\n        require(\r\n            context.getAttestationPartyStorageAdapter().getIsFieldVerificationAllowed(attestationPartyAddress, accountFieldName),\r\n            \"provided attestation party have not access to this field verification\");\r\n\r\n        uint rewardAmount = context.getVerificationPriceList().getPrice(accountFieldName);\r\n\r\n        BaseVerification createdContract = new BaseVerification(_storage, rewardAmount, account, msg.sender, dataIndex, accountFieldName);\r\n        createdContract.transferOwnership(attestationPartyAddress);\r\n\r\n        address createdContractAddress = address(createdContract);\r\n        createdContracts[createdContractAddress] = true;\r\n        contracts[key] = createdContractAddress;\r\n        context.getKimlicToken().transferFrom(msg.sender, createdContractAddress, rewardAmount);\r\n        \r\n        context.getAccountStorageAdapter().setFieldVerificationContractAddress(account, accountFieldName, dataIndex, createdContractAddress);\r\n    }\r\n}\r\n","abiDocs":[{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createPhoneVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"createPhoneVerification(address,address,string)","signatureHash":"16b5a81a"},{"constant":false,"inputs":[{"name":"account","type":"address","description":"user account address\r"},{"name":"attestationPartyAddress","type":"address","description":"Attestation party address which going to perform verification\r"},{"name":"key","type":"string","description":"random string, used to receive created contract address\r"},{"name":"accountFieldName","type":"string","description":"attribute code\r"}],"name":"createBaseVerificationContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"creates verification contract for specific client and attribute\r","signature":"createBaseVerificationContract(address,address,string,string)","signatureHash":"1d276977"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"createdContracts","payable":false,"stateMutability":"view","type":"function","signature":"createdContracts(address)","signatureHash":"3b562a6d"},{"constant":true,"inputs":[{"name":"key","type":"string","description":"random string speficied at creation\r"}],"name":"getVerificationContract","payable":false,"stateMutability":"view","type":"function","notice":"returns address of created contract\r","signature":"getVerificationContract(string)","signatureHash":"8575e5a5"},{"constant":true,"inputs":[{"name":"filedName","type":"string","description":"attribute code\r"}],"name":"getTokensLockPeriod","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"tokens lock period for specific attribute in seconds    \r","notice":"returns tokens lock period for specific attribute\r","signature":"getTokensLockPeriod(string)","signatureHash":"8a7992d3"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createEmailVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"createEmailVerification(address,address,string)","signatureHash":"b1b5dcf5"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"attestationPartyAddress","type":"address"},{"name":"key","type":"string"}],"name":"createDocumentVerification","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"createDocumentVerification(address,address,string)","signatureHash":"c3e2ddb1"},{"constant":false,"inputs":[{"name":"filedName","type":"string","description":"attribute code\r"},{"name":"lockPeriod","type":"uint256","description":"tokens lock period for specific attribute in seconds\r"}],"name":"setTokensLockPeriod","payable":false,"stateMutability":"nonpayable","type":"function","notice":"defines tokens lock period for specific attribute\r","signature":"setTokensLockPeriod(string,uint256)","signatureHash":"e10deff2"},{"inputs":[{"name":"contextStorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]}
