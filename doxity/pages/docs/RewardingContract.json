{"author":"Bohdan Grytsenko\r","title":"User rewarding contract\r","fileName":"\\contracts\\RewardingContract.sol","name":"RewardingContract","abi":[{"constant":true,"inputs":[],"name":"milestone2Reward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"rewardAmount","type":"uint256"}],"name":"setMilestone2Reward","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"milestone1Reward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"rewardAmount","type":"uint256"}],"name":"setMilestone1Reward","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"checkMilestones","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"fieldName","type":"string"}],"name":"removeMielstone2FieldName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"fieldName","type":"string"}],"name":"addMielstone2FieldName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"contextStorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"source":"pragma solidity ^0.4.23;\r\n\r\n\r\nimport \"./openzeppelin-solidity/Ownable.sol\";\r\nimport \"./AccountStorageAdapter.sol\";\r\nimport \"./KimlicContractsContext.sol\";\r\nimport \"./BaseVerification.sol\";\r\nimport \"./WithKimlicContext.sol\";\r\n\r\n/// @title User rewarding contract\r\n/// @author Bohdan Grytsenko\r\n/// @notice Tracks milestones achievement and correspondent reward\r\ncontract RewardingContract is Ownable, WithKimlicContext {\r\n    /// public attributes ///\r\n    uint public milestone1Reward;\r\n    uint public milestone2Reward;\r\n    mapping (string=>bool) milestone2FieldNames;\r\n    \r\n    /// private attributes ///\r\n    string private constant email = \"email\";\r\n    string private constant phone = \"phone\";\r\n    //string private constant identity = \"identity\";\r\n    /// Constructors ///\r\n    constructor (address contextStorage) public WithKimlicContext(contextStorage) {\r\n    }\r\n\r\n    /// @notice adds attribute to be cosidered for 2nd milestone\r\n    /// @param fieldName attribute code\r\n    function addMielstone2FieldName(string fieldName) public onlyOwner() {\r\n        require(getContext().getAccountStorageAdapter().isAllowedFieldName(fieldName));\r\n        milestone2FieldNames[fieldName] = true;\r\n    }\r\n\r\n    /// @notice removes attribute from being cosidered for 2nd milestone\r\n    /// @param fieldName attribute code\r\n    function removeMielstone2FieldName(string fieldName) public onlyOwner() {\r\n        delete milestone2FieldNames[fieldName];\r\n    }\r\n\r\n    /// @notice defines reward amount for 1st milestone\r\n    /// @param rewardAmount tokens reward amount\r\n    function setMilestone1Reward(uint rewardAmount) public onlyOwner() {\r\n        milestone1Reward = rewardAmount;\r\n    }\r\n\r\n    /// @notice defines reward amount for 2nd milestone\r\n    /// @param rewardAmount tokens reward amount\r\n    function setMilestone2Reward(uint rewardAmount)  public onlyOwner() {\r\n        milestone2Reward = rewardAmount;\r\n    }\r\n\r\n    /// @notice triggers a check for specific user and attribute to see if any of milestones conditions reached\r\n    /// @param accountAddress user account address\r\n    /// @param accountFieldName attribute code\r\n    function checkMilestones(address accountAddress, string accountFieldName) public {\r\n        require(getContext().getVerificationContractFactory().createdContracts(msg.sender));\r\n        if (isEqualStrings(accountFieldName, email) ||\r\n            isEqualStrings(accountFieldName, phone)) { //TODO use same logic as milestone2?\r\n            \r\n            checkMilestone1(accountAddress);\r\n        } \r\n        else if (milestone2FieldNames[accountFieldName]) {\r\n            checkMilestone2(accountAddress, accountFieldName);\r\n        }\r\n    }\r\n\r\n    /// private methods ///\r\n    function checkMilestone1(address accountAddress) private {\r\n        if (getIsRewardAlreadyGranted(accountAddress, 1)) {\r\n            return;\r\n        }\r\n        if (getIsDataVerified(accountAddress, email) &&\r\n            getIsDataVerified(accountAddress, phone)) {\r\n            \r\n            sendReward(accountAddress, milestone1Reward);\r\n            getContext().getAccountStorageAdapter().setRewardedAt(accountAddress, 1);\r\n        }\r\n        \r\n    }\r\n\r\n    function checkMilestone2(address accountAddress, string fieldName) private {\r\n        if (getIsRewardAlreadyGranted(accountAddress, 2)) {\r\n            return;\r\n        }\r\n        if (getIsDataVerified(accountAddress, fieldName)) {\r\n            sendReward(accountAddress, milestone2Reward);\r\n            getContext().getAccountStorageAdapter().setRewardedAt(accountAddress, 2);\r\n        }\r\n    }\r\n\r\n    function sendReward(address accountAddress, uint rewardAmount) private {\r\n        KimlicContractsContext context = getContext();\r\n\r\n        address communityTokenWalletAddress = context.getCommunityTokenWalletAddress();\r\n\r\n        context.getKimlicToken().transferFrom(communityTokenWalletAddress, accountAddress, rewardAmount);\r\n    }\r\n\r\n    function getIsDataVerified(address accountAddress, string accountFieldName) \r\n            private view returns(bool isVerified) {\r\n        address verificationContractAddress = getContext().getAccountStorageAdapter()\r\n            .getLastFieldVerificationContractAddress(accountAddress, accountFieldName);\r\n        \r\n        if (verificationContractAddress != address(0)) {\r\n            BaseVerification verificationContract = BaseVerification(verificationContractAddress);\r\n            \r\n            isVerified = verificationContract.getStatus() == BaseVerification.Status.Verified;\r\n        }\r\n    }\r\n\r\n    function getIsRewardAlreadyGranted(address accountAddress, uint milestone) private view returns(bool isVerified) {\r\n        return getContext().getAccountStorageAdapter().getRewardedAt(accountAddress, milestone) > 0;\r\n    }\r\n\r\n    function isEqualStrings(string leftValue, string rightValue) private pure returns(bool isEqual){\r\n        isEqual = keccak256(bytes(leftValue)) == keccak256(bytes(rightValue));\r\n    }\r\n\r\n}","abiDocs":[{"constant":true,"inputs":[],"name":"milestone2Reward","payable":false,"stateMutability":"view","type":"function","signature":"milestone2Reward()","signatureHash":"05290095"},{"constant":false,"inputs":[{"name":"rewardAmount","type":"uint256","description":"tokens reward amount\r"}],"name":"setMilestone2Reward","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"defines reward amount for 2nd milestone\r","signature":"setMilestone2Reward(uint256)","signatureHash":"2100a599"},{"constant":true,"inputs":[],"name":"milestone1Reward","payable":false,"stateMutability":"view","type":"function","signature":"milestone1Reward()","signatureHash":"38499e2f"},{"constant":false,"inputs":[{"name":"rewardAmount","type":"uint256","description":"tokens reward amount\r"}],"name":"setMilestone1Reward","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"defines reward amount for 1st milestone\r","signature":"setMilestone1Reward(uint256)","signatureHash":"4e3c5062"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to relinquish control of the contract.\r","signature":"renounceOwnership()","signatureHash":"715018a6"},{"constant":false,"inputs":[{"name":"accountAddress","type":"address","description":"user account address\r"},{"name":"accountFieldName","type":"string","description":"attribute code\r"}],"name":"checkMilestones","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"triggers a check for specific user and attribute to see if any of milestones conditions reached\r","signature":"checkMilestones(address,string)","signatureHash":"81f5cd68"},{"constant":true,"inputs":[],"name":"owner","payable":false,"stateMutability":"view","type":"function","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":false,"inputs":[{"name":"fieldName","type":"string","description":"attribute code\r"}],"name":"removeMielstone2FieldName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"removes attribute from being cosidered for 2nd milestone\r","signature":"removeMielstone2FieldName(string)","signatureHash":"9bac4eb4"},{"constant":false,"inputs":[{"name":"fieldName","type":"string","description":"attribute code\r"}],"name":"addMielstone2FieldName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"adds attribute to be cosidered for 2nd milestone\r","signature":"addMielstone2FieldName(string)","signatureHash":"ad66a9c3"},{"constant":false,"inputs":[{"name":"newOwner","type":"address","description":"The address to transfer ownership to.\r"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to transfer control of the contract to a newOwner.\r","signature":"transferOwnership(address)","signatureHash":"f2fde38b"},{"inputs":[{"name":"contextStorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event","signature":"OwnershipRenounced(address)","signatureHash":"f8df3114"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event","signature":"OwnershipTransferred(address,address)","signatureHash":"8be0079c"}]}
