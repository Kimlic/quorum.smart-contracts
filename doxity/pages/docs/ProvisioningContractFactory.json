{"author":"Bohdan Grytsenko\r","title":"Factory contract for data provisioning process\r","fileName":"\\contracts\\ProvisioningContractFactory.sol","name":"ProvisioningContractFactory","abi":[{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"createdContracts","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"attributeName","type":"string"},{"name":"communityTokenWallet","type":"uint8"},{"name":"coOwner","type":"uint8"},{"name":"kimlicWallet","type":"uint8"},{"name":"account","type":"uint8"}],"name":"setInterestsPercent","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"fieldName","type":"string"}],"name":"getAccountInterestPercent","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"key","type":"string"}],"name":"createProvisioningContract","outputs":[{"name":"createdContract","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"filedName","type":"string"}],"name":"getTokensLockPeriod","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"fieldName","type":"string"}],"name":"getKimlicWalletInterestPercent","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"fieldName","type":"string"}],"name":"getCommunityTokenWalletInterestPercent","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"string"}],"name":"getProvisioningContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"fieldName","type":"string"}],"name":"getCoOwnerInterestPercent","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"filedName","type":"string"},{"name":"lockPeriod","type":"uint256"}],"name":"setTokensLockPeriod","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"contextStorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"source":"pragma solidity ^0.4.23;\r\n\r\nimport \"./KimlicContractsContext.sol\";\r\nimport \"./ProvisioningContract.sol\";\r\nimport \"./WithKimlicContext.sol\";\r\n\r\n/// @title Factory contract for data provisioning process\r\n/// @author Bohdan Grytsenko\r\n/// @notice Produces provisioning contract for each case of client attribute consumption by Relying party\r\ncontract ProvisioningContractFactory is WithKimlicContext {\r\n    /// public attributes ///\r\n    mapping(address=>bool) public createdContracts;\r\n    mapping(string=>address) private contracts;\r\n    \r\n    /// private attributes ///\r\n    mapping(string=>uint8) private _communityTokenWalletInterestPercent;\r\n    mapping(string=>uint8) private _kimlicWalletInterestPercent;\r\n    mapping(string=>uint8) private _accountInterestPercent;\r\n    mapping(string=>uint8) private _coOwnerInterestPercent;\r\n    mapping(string=>uint) private tokensLockPeriod;\r\n\r\n    /// Constructors ///\r\n    constructor (address contextStorage) public WithKimlicContext(contextStorage) {\r\n    }\r\n\r\n    /// @notice returns tokens lock period for specific attribute\r\n    /// @param filedName attribute code\r\n    /// @return tokens lock period for specific attribute in seconds\r\n    function getTokensLockPeriod(string filedName) view public returns (uint) {\r\n        return tokensLockPeriod[filedName];\r\n    }\r\n\r\n    /// @notice defines tokens lock period for specific attribute\r\n    /// @param filedName attribute code\r\n    /// @param lockPeriod tokens lock period for specific attribute in seconds\r\n    function setTokensLockPeriod(string filedName, uint lockPeriod) public returns (uint) {\r\n        tokensLockPeriod[filedName] = lockPeriod;\r\n    }\r\n\r\n    /// @notice creates provisioning contract for specific client and attribute\r\n    /// @param account user account address\r\n    /// @param accountFieldName attribute code\r\n    /// @param key random string, used to receive created contract address\r\n    function createProvisioningContract(address account, string accountFieldName, string key) \r\n            public returns(ProvisioningContract createdContract) {\r\n        \r\n        KimlicContractsContext context = getContext();\r\n        uint reward = context.getProvisioningPriceList().getPrice(accountFieldName);\r\n        uint dataIndex = context.getAccountStorageAdapter().getFieldHistoryLength(account, accountFieldName);\r\n        require(dataIndex > 0, \"Data is empty\");\r\n\r\n        createdContract = new ProvisioningContract(_storage, account, accountFieldName, dataIndex, reward);\r\n        createdContract.transferOwnership(msg.sender);\r\n        address createdContractAddress = address(createdContract);\r\n        createdContracts[createdContractAddress] = true;\r\n        contracts[key] = createdContractAddress;\r\n\r\n        context.getKimlicToken().transferFrom(msg.sender, createdContractAddress, reward);\r\n    }\r\n\r\n    /// @notice defines cashflow split for specific atttribute\r\n    /// @param attributeName attribute code\r\n    /// @param communityTokenWallet casflow split for community token wallet\r\n    /// @param coOwner casflow split for verification co-owner\r\n    /// @param kimlicWallet cashflow split for Kimlic wallet\r\n    /// @param attributeName cashflow split for user account\r\n    function setInterestsPercent(string attributeName, uint8 communityTokenWallet, uint8 coOwner, uint8 kimlicWallet, uint8 account) public {\r\n        require((communityTokenWallet + kimlicWallet + account + coOwner) == 100);\r\n\r\n        _communityTokenWalletInterestPercent[attributeName] = communityTokenWallet;\r\n        _kimlicWalletInterestPercent[attributeName] = kimlicWallet;\r\n        _accountInterestPercent[attributeName] = account;\r\n        _coOwnerInterestPercent[attributeName] = coOwner;\r\n    }\r\n\r\n    /// @notice returns address of created contract\r\n    /// @param key random string speficied at creation\r\n    function getProvisioningContract(string key) view public returns (address) {\r\n        return contracts[key];\r\n    }\r\n\r\n    /// @notice returns cashflow split for CommunityToken wallet\r\n    /// @param fieldName attribute code\r\n    /// @return casflow split for community token wallet\r\n    function getCommunityTokenWalletInterestPercent(string fieldName) public view returns(uint8) {\r\n        return _communityTokenWalletInterestPercent[fieldName];\r\n    }\r\n\r\n    /// @notice returns cashflow split for Kimlic wallet\r\n    /// @param fieldName attribute code\r\n    /// @return casflow split for Kimlic token wallet\r\n    function getKimlicWalletInterestPercent(string fieldName) public view returns(uint8) {\r\n        return _kimlicWalletInterestPercent[fieldName];\r\n    }\r\n\r\n    /// @notice returns cashflow split for user account\r\n    /// @param fieldName attribute code\r\n    /// @return casflow split for user account\r\n    function getAccountInterestPercent(string fieldName) public view returns(uint8) {\r\n        return _accountInterestPercent[fieldName];\r\n    }\r\n\r\n    /// @notice returns cashflow split for verification co-owner\r\n    /// @param fieldName attribute code\r\n    /// @return casflow split for verification co-owner\r\n    function getCoOwnerInterestPercent(string fieldName) public view returns(uint8) {\r\n        return _coOwnerInterestPercent[fieldName];\r\n    }\r\n}","abiDocs":[{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"createdContracts","payable":false,"stateMutability":"view","type":"function","signature":"createdContracts(address)","signatureHash":"3b562a6d"},{"constant":false,"inputs":[{"name":"attributeName","type":"string","description":"cashflow split for user account\r"},{"name":"communityTokenWallet","type":"uint8","description":"casflow split for community token wallet\r"},{"name":"coOwner","type":"uint8","description":"casflow split for verification co-owner\r"},{"name":"kimlicWallet","type":"uint8","description":"cashflow split for Kimlic wallet\r"},{"name":"account","type":"uint8"}],"name":"setInterestsPercent","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"defines cashflow split for specific atttribute\r","signature":"setInterestsPercent(string,uint8,uint8,uint8,uint8)","signatureHash":"4efc1c5d"},{"constant":true,"inputs":[{"name":"fieldName","type":"string","description":"attribute code\r"}],"name":"getAccountInterestPercent","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function","return":"casflow split for user account\r","notice":"returns cashflow split for user account\r","signature":"getAccountInterestPercent(string)","signatureHash":"7bea5578"},{"constant":false,"inputs":[{"name":"account","type":"address","description":"user account address\r"},{"name":"accountFieldName","type":"string","description":"attribute code\r"},{"name":"key","type":"string","description":"random string, used to receive created contract address\r"}],"name":"createProvisioningContract","payable":false,"stateMutability":"nonpayable","type":"function","notice":"creates provisioning contract for specific client and attribute\r","signature":"createProvisioningContract(address,string,string)","signatureHash":"7c502361"},{"constant":true,"inputs":[{"name":"filedName","type":"string","description":"attribute code\r"}],"name":"getTokensLockPeriod","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"tokens lock period for specific attribute in seconds\r","notice":"returns tokens lock period for specific attribute\r","signature":"getTokensLockPeriod(string)","signatureHash":"8a7992d3"},{"constant":true,"inputs":[{"name":"fieldName","type":"string","description":"attribute code\r"}],"name":"getKimlicWalletInterestPercent","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function","return":"casflow split for Kimlic token wallet\r","notice":"returns cashflow split for Kimlic wallet\r","signature":"getKimlicWalletInterestPercent(string)","signatureHash":"8bbf2bd8"},{"constant":true,"inputs":[{"name":"fieldName","type":"string","description":"attribute code\r"}],"name":"getCommunityTokenWalletInterestPercent","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function","return":"casflow split for community token wallet\r","notice":"returns cashflow split for CommunityToken wallet\r","signature":"getCommunityTokenWalletInterestPercent(string)","signatureHash":"945ba30c"},{"constant":true,"inputs":[{"name":"key","type":"string","description":"random string speficied at creation\r"}],"name":"getProvisioningContract","payable":false,"stateMutability":"view","type":"function","notice":"returns address of created contract\r","signature":"getProvisioningContract(string)","signatureHash":"c50ce9bc"},{"constant":true,"inputs":[{"name":"fieldName","type":"string","description":"attribute code\r"}],"name":"getCoOwnerInterestPercent","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function","return":"casflow split for verification co-owner\r","notice":"returns cashflow split for verification co-owner\r","signature":"getCoOwnerInterestPercent(string)","signatureHash":"cf8d5c95"},{"constant":false,"inputs":[{"name":"filedName","type":"string","description":"attribute code\r"},{"name":"lockPeriod","type":"uint256","description":"tokens lock period for specific attribute in seconds\r"}],"name":"setTokensLockPeriod","payable":false,"stateMutability":"nonpayable","type":"function","notice":"defines tokens lock period for specific attribute\r","signature":"setTokensLockPeriod(string,uint256)","signatureHash":"e10deff2"},{"inputs":[{"name":"contextStorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]}
