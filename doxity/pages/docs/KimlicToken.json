{"author":"Bohdan Grytsenko\r","title":"Contract to define tokens emission\r","fileName":"\\contracts\\KimlicToken.sol","name":"KimlicToken","abi":[{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}],"source":"pragma solidity ^0.4.23;\r\n\r\n\r\nimport \"./openzeppelin-solidity/StandardToken.sol\";\r\n\r\n/// @title Contract to define tokens emission\r\n/// @author Bohdan Grytsenko\r\n/// @notice Defines total supply of emitted tokens and allocate them to owner\r\ncontract KimlicToken is StandardToken {\r\n    uint public constant decimals = 18; \r\n\r\n    /// constructors ///\r\n    constructor () public {\r\n        \r\n        totalSupply_ = 150000000 ** decimals;\r\n        balances[msg.sender] = totalSupply_;\r\n    }\r\n\r\n}","abiDocs":[{"constant":false,"inputs":[{"name":"_spender","type":"address","description":"The address which will spend the funds.\r"},{"name":"_value","type":"uint256","description":"The amount of tokens to be spent.\r"}],"name":"approve","payable":false,"stateMutability":"nonpayable","type":"function","details":"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r","signature":"approve(address,uint256)","signatureHash":"095ea7b3"},{"constant":true,"inputs":[],"name":"totalSupply","payable":false,"stateMutability":"view","type":"function","details":"total number of tokens in existence\r","signature":"totalSupply()","signatureHash":"18160ddd"},{"constant":false,"inputs":[{"name":"_from","type":"address","description":"address The address which you want to send tokens from\r"},{"name":"_to","type":"address","description":"address The address which you want to transfer to\r"},{"name":"_value","type":"uint256","description":"uint256 the amount of tokens to be transferred\r"}],"name":"transferFrom","payable":false,"stateMutability":"nonpayable","type":"function","details":"Transfer tokens from one address to another\r","signature":"transferFrom(address,address,uint256)","signatureHash":"23b872dd"},{"constant":true,"inputs":[],"name":"decimals","payable":false,"stateMutability":"view","type":"function","signature":"decimals()","signatureHash":"313ce567"},{"constant":false,"inputs":[{"name":"_spender","type":"address","description":"The address which will spend the funds.\r"},{"name":"_subtractedValue","type":"uint256","description":"The amount of tokens to decrease the allowance by.\r"}],"name":"decreaseApproval","payable":false,"stateMutability":"nonpayable","type":"function","details":"Decrease the amount of tokens that an owner allowed to a spender.\r     * approve should be called when allowed[_spender] == 0. To decrement\r allowed value is better to use this function to avoid 2 calls (and wait until\r the first transaction is mined)\r From MonolithDAO Token.sol\r","signature":"decreaseApproval(address,uint256)","signatureHash":"66188463"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"The address to query the the balance of.\r"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","details":"Gets the balance of the specified address.\r","return":"An uint256 representing the amount owned by the passed address.\r","signature":"balanceOf(address)","signatureHash":"70a08231"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"The address to transfer to.\r"},{"name":"_value","type":"uint256","description":"The amount to be transferred.\r"}],"name":"transfer","payable":false,"stateMutability":"nonpayable","type":"function","details":"transfer token for a specified address\r","signature":"transfer(address,uint256)","signatureHash":"a9059cbb"},{"constant":false,"inputs":[{"name":"_spender","type":"address","description":"The address which will spend the funds.\r"},{"name":"_addedValue","type":"uint256","description":"The amount of tokens to increase the allowance by.\r"}],"name":"increaseApproval","payable":false,"stateMutability":"nonpayable","type":"function","details":"Increase the amount of tokens that an owner allowed to a spender.\r     * approve should be called when allowed[_spender] == 0. To increment\r allowed value is better to use this function to avoid 2 calls (and wait until\r the first transaction is mined)\r From MonolithDAO Token.sol\r","signature":"increaseApproval(address,uint256)","signatureHash":"d73dd623"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"address The address which owns the funds.\r"},{"name":"_spender","type":"address","description":"address The address which will spend the funds.\r"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","details":"Function to check the amount of tokens that an owner allowed to a spender.\r","return":"A uint256 specifying the amount of tokens still available for the spender.\r","signature":"allowance(address,address)","signatureHash":"dd62ed3e"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event","signature":"Approval(address,address,uint256)","signatureHash":"8c5be1e5"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event","signature":"Transfer(address,address,uint256)","signatureHash":"ddf252ad"}]}
