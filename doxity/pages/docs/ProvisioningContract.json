{"author":"Bohdan Grytsenko\r","title":"Template definition for attribute consumption case\r","fileName":"\\contracts\\ProvisioningContract.sol","name":"ProvisioningContract","abi":[{"constant":true,"inputs":[],"name":"tokensUnlockAt","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"status","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"index","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getData","outputs":[{"name":"data","type":"string"},{"name":"verificationStatus","type":"uint8"},{"name":"verificationContractAddress","type":"address"},{"name":"verifiedAt","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"relyingParty","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"account","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getStatusName","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finalizeProvisioning","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"fieldName","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"rewardAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isVerificationFinished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"contextStorage","type":"address"},{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"fieldIndex","type":"uint256"},{"name":"reward","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"source":"pragma solidity ^0.4.23;\r\n\r\n\r\nimport \"./ProvisioningContractFactory.sol\";\r\nimport \"./openzeppelin-solidity/Ownable.sol\";\r\nimport \"./KimlicContractsContext.sol\";\r\nimport \"./AccountStorageAdapter.sol\";\r\nimport \"./KimlicToken.sol\";\r\nimport \"./BaseVerification.sol\";\r\nimport \"./WithKimlicContext.sol\";\r\n\r\n/// @title Template definition for attribute consumption case\r\n/// @author Bohdan Grytsenko\r\n/// @notice Used as template for ProvisioningContractFactory to create provisioning contract instance each time when it's requested\r\ncontract ProvisioningContract is Ownable, WithKimlicContext {\r\n    \r\n    /// public attributes ///\r\n    address public relyingParty;\r\n    address public account;\r\n    Status public status;\r\n    uint public tokensUnlockAt;\r\n    string public fieldName;\r\n    uint public index;\r\n    uint public rewardAmount;\r\n    /// enums ///\r\n    enum Status { None, Created, DataProvided, Canceled }\r\n\r\n    /// constructors ///\r\n    constructor (\r\n        address contextStorage, address accountAddress, string accountFieldName,\r\n        uint fieldIndex, uint reward)\r\n            public WithKimlicContext(contextStorage) {\r\n\r\n        KimlicContractsContext context = getContext();\r\n        ProvisioningContractFactory factory = context.getProvisioningContractFactory();\r\n        require(msg.sender == address(factory));\r\n        \r\n        tokensUnlockAt = block.timestamp + factory.getTokensLockPeriod(accountFieldName) * 1 minutes;\r\n        \r\n        account = accountAddress;\r\n        rewardAmount = reward;\r\n        fieldName = accountFieldName;\r\n        index = fieldIndex;\r\n    }\r\n\r\n    /// @notice checks if requested attribute is already verified\r\n    /// @return true if requested attribute is already verified, false if not\r\n    function isVerificationFinished() public view returns(bool) {\r\n        AccountStorageAdapter adapter = getContext().getAccountStorageAdapter();\r\n\r\n        address verificationContractAddress = adapter.getFieldVerificationContractAddress(account, fieldName, index);\r\n\r\n        if (verificationContractAddress != address(0)) {\r\n            BaseVerification verificationContract = BaseVerification(verificationContractAddress);\r\n            BaseVerification.Status verificationStatus = verificationContract.getStatus();\r\n            return verificationStatus == BaseVerification.Status.Verified ||\r\n                verificationStatus == BaseVerification.Status.Unverified;\r\n        }\r\n    }\r\n\r\n    /// @notice executed by Relying party once it ensured verification details for requested attribute are available\r\n    function finalizeProvisioning() public onlyOwner() {\r\n        status = Status.DataProvided;\r\n        sendRewards();\r\n    }\r\n\r\n    /**\r\n    @notice executed by Relying  party to get verification details of requested attribute\r\n    @return {\r\n        \"data\": \"attribute hash\",\r\n        \"verificationStatus\": \"attribute verification status\",\r\n        \"verificationContractAddress\": \"verification contract address\",\r\n        \"verifiedAt\": \"verification timestamp, unix epoch format\"\r\n        }    \r\n    */\r\n    function getData() public view onlyOwner()\r\n        returns(string data, BaseVerification.Status verificationStatus, address verificationContractAddress, uint256 verifiedAt) {\r\n\r\n        require(status == Status.DataProvided);\r\n        \r\n        AccountStorageAdapter adapter = getContext().getAccountStorageAdapter();\r\n\r\n        ( data ) = adapter.getFieldMainData(account, fieldName, index);\r\n\r\n        ( verificationStatus, verificationContractAddress, verifiedAt ) = adapter.getFieldVerificationData(account, fieldName, index); \r\n    }\r\n\r\n    /// @notice executed by party which requested attribute provisioning to get tokens back from contract. Tokens will be returned only after certain timestamp defined as tokensUnlockAt\r\n    function withdraw() public onlyOwner() {\r\n        require(block.timestamp >= tokensUnlockAt && status == Status.Created);\r\n\r\n        status = Status.Canceled;\r\n        KimlicToken kimlicToken = getContext().getKimlicToken();\r\n        kimlicToken.transfer(owner, kimlicToken.balanceOf(address(this)));\r\n    }\r\n\r\n    /// private methods ///\r\n\r\n    function sendRewards() private {\r\n        KimlicContractsContext context = getContext();\r\n        KimlicToken kimlicToken = context.getKimlicToken();\r\n\r\n        address verificationContractAddress = context.getAccountStorageAdapter()\r\n            .getFieldVerificationContractAddress(account, fieldName, index);\r\n\r\n        BaseVerification verificationContract = BaseVerification(verificationContractAddress);\r\n        address coOwner = verificationContract.coOwner();\r\n        if (coOwner == owner) {\r\n            kimlicToken.transfer(owner, rewardAmount);\r\n            return;\r\n        }\r\n\r\n        ProvisioningContractFactory factory = context.getProvisioningContractFactory();\r\n        uint accountInterest = rewardAmount * factory.getAccountInterestPercent(fieldName) / 100;\r\n        uint coOwnerInterest = rewardAmount * factory.getCoOwnerInterestPercent(fieldName) / 100;\r\n        uint communityTokenWalletInterest = rewardAmount * factory.getCommunityTokenWalletInterestPercent(fieldName) / 100;\r\n        uint kimlicWalletInterest = rewardAmount * factory.getKimlicWalletInterestPercent(fieldName) / 100;\r\n        \r\n        kimlicToken.transfer(account, accountInterest);\r\n        kimlicToken.transfer(coOwner, coOwnerInterest);\r\n        kimlicToken.transfer(context.getCommunityTokenWalletAddress(), communityTokenWalletInterest);\r\n        kimlicToken.transfer(context.getKimlicWalletAddress(), kimlicWalletInterest);\r\n    }\r\n\r\n    function getStatusName() public view returns(string) {\r\n        if (status == Status.None) {\r\n            return \"None\";\r\n        }\r\n        if (status == Status.Created) {\r\n            return \"Created\";\r\n        }\r\n        if (status == Status.DataProvided) {\r\n            return \"DataProvided\";\r\n        }\r\n        if (status == Status.Canceled) {\r\n            return \"Canceled\";\r\n        }\r\n    }\r\n}","abiDocs":[{"constant":true,"inputs":[],"name":"tokensUnlockAt","payable":false,"stateMutability":"view","type":"function","signature":"tokensUnlockAt()","signatureHash":"009aa2aa"},{"constant":true,"inputs":[],"name":"status","payable":false,"stateMutability":"view","type":"function","signature":"status()","signatureHash":"200d2ed2"},{"constant":true,"inputs":[],"name":"index","payable":false,"stateMutability":"view","type":"function","signature":"index()","signatureHash":"2986c0e5"},{"constant":true,"inputs":[],"name":"getData","outputs":[{"name":"data","type":"string","description":"attribute hash"},{"name":"verificationStatus","type":"uint8","description":"attribute verification status"},{"name":"verificationContractAddress","type":"address","description":"verification contract address"},{"name":"verifiedAt","type":"uint256","description":"verification timestamp, unix epoch format"}],"payable":false,"stateMutability":"view","type":"function","return":"{\r \"data\": \"attribute hash\",\r \"verificationStatus\": \"attribute verification status\",\r \"verificationContractAddress\": \"verification contract address\",\r \"verifiedAt\": \"verification timestamp, unix epoch format\"\r }    \r","notice":"executed by Relying  party to get verification details of requested attribute\r","signature":"getData()","signatureHash":"3bc5de30"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"executed by party which requested attribute provisioning to get tokens back from contract. Tokens will be returned only after certain timestamp defined as tokensUnlockAt\r","signature":"withdraw()","signatureHash":"3ccfd60b"},{"constant":true,"inputs":[],"name":"relyingParty","payable":false,"stateMutability":"view","type":"function","signature":"relyingParty()","signatureHash":"4d75370c"},{"constant":true,"inputs":[],"name":"account","payable":false,"stateMutability":"view","type":"function","signature":"account()","signatureHash":"5dab2420"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to relinquish control of the contract.\r","signature":"renounceOwnership()","signatureHash":"715018a6"},{"constant":true,"inputs":[],"name":"owner","payable":false,"stateMutability":"view","type":"function","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":true,"inputs":[],"name":"getStatusName","payable":false,"stateMutability":"view","type":"function","signature":"getStatusName()","signatureHash":"95389225"},{"constant":false,"inputs":[],"name":"finalizeProvisioning","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"executed by Relying party once it ensured verification details for requested attribute are available\r","signature":"finalizeProvisioning()","signatureHash":"9817202a"},{"constant":true,"inputs":[],"name":"fieldName","payable":false,"stateMutability":"view","type":"function","signature":"fieldName()","signatureHash":"b6d89111"},{"constant":false,"inputs":[{"name":"newOwner","type":"address","description":"The address to transfer ownership to.\r"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to transfer control of the contract to a newOwner.\r","signature":"transferOwnership(address)","signatureHash":"f2fde38b"},{"constant":true,"inputs":[],"name":"rewardAmount","payable":false,"stateMutability":"view","type":"function","signature":"rewardAmount()","signatureHash":"f7b2a7be"},{"constant":true,"inputs":[],"name":"isVerificationFinished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","return":"true if requested attribute is already verified, false if not\r","notice":"checks if requested attribute is already verified\r","signature":"isVerificationFinished()","signatureHash":"f9cb51de"},{"inputs":[{"name":"contextStorage","type":"address"},{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"fieldIndex","type":"uint256"},{"name":"reward","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event","signature":"OwnershipRenounced(address)","signatureHash":"f8df3114"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event","signature":"OwnershipTransferred(address,address)","signatureHash":"8be0079c"}]}
