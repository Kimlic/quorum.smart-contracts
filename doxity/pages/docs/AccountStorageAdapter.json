{"fileName":"\\contracts\\AccountStorageAdapter.sol","name":"AccountStorageAdapter","abi":[{"constant":true,"inputs":[{"name":"fieldName","type":"string"}],"name":"isAllowedFieldName","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"index","type":"uint256"}],"name":"getFieldVerificationData","outputs":[{"name":"verificationStatus","type":"uint8"},{"name":"verificationContractAddress","type":"address"},{"name":"verifiedAt","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"getFieldLastVerificationData","outputs":[{"name":"verificationStatus","type":"uint8"},{"name":"verificationContractAddress","type":"address"},{"name":"verifiedAt","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"fieldName","type":"string"}],"name":"removeAllowedFieldName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"fieldName","type":"string"}],"name":"addAllowedFieldName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"verificationContractAddress","type":"address"}],"name":"setFieldLastVerificationContractAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"data","type":"string"},{"name":"accountFieldName","type":"string"}],"name":"setFieldMainData","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"getFieldDetails","outputs":[{"name":"data","type":"string"},{"name":"verificationStatusName","type":"string"},{"name":"verificationContractAddress","type":"address"},{"name":"verifiedAt","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"index","type":"uint256"},{"name":"verificationContractAddress","type":"address"}],"name":"setFieldVerificationContractAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"getFieldHistoryLength","outputs":[{"name":"length","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"accountAddress","type":"address"},{"name":"milestone","type":"uint256"}],"name":"setRewardedAt","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"index","type":"uint256"}],"name":"getIsFieldVerificationContractExist","outputs":[{"name":"result","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"index","type":"uint256"}],"name":"getFieldVerificationContractAddress","outputs":[{"name":"verificationContract","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"index","type":"uint256"}],"name":"getFieldMainData","outputs":[{"name":"data","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"getFieldLastMainData","outputs":[{"name":"data","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"milestone","type":"uint256"}],"name":"getRewardedAt","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"getLastFieldVerificationContractAddress","outputs":[{"name":"verificationContract","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"contextstorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"source":"pragma solidity ^0.4.23;\r\n\r\n\r\nimport \"./WithKimlicContext.sol\";\r\nimport \"./openzeppelin-solidity/Ownable.sol\";\r\nimport \"./KimlicContractsContext.sol\";\r\nimport \"./AccountStorage.sol\";\r\nimport \"./BaseVerification.sol\";\r\n\r\n\r\ncontract AccountStorageAdapter is Ownable, WithKimlicContext {\r\n\r\n    /// public attributes ///\r\n    mapping(string=>bool) allowedFieldNames;\r\n\r\n    /// private attributes ///\r\n    string private constant metaDataKey = \"data\";\r\n    string private constant metaVerificationContractKey = \"verificationContractAddress\";\r\n    string private constant lengthKey = \"length\";\r\n\r\n    /// constructors ///\r\n\r\n    constructor (address contextstorage) public WithKimlicContext(contextstorage) {\r\n    }\r\n\r\n    /// public methods ///\r\n\r\n    function addAllowedFieldName(string fieldName) public {\r\n        require(msg.sender == owner || msg.sender == getContext().owner());\r\n        allowedFieldNames[fieldName] = true;\r\n    }\r\n\r\n    function removeAllowedFieldName(string fieldName) public onlyOwner() {\r\n        require(msg.sender == owner || msg.sender == getContext().owner());\r\n        delete allowedFieldNames[fieldName];\r\n    }\r\n\r\n    function isAllowedFieldName(string fieldName) public view returns(bool) {\r\n        return allowedFieldNames[fieldName];\r\n    }\r\n\r\n    function setFieldMainData(string data, string accountFieldName) public {\r\n        updateField(msg.sender, data, accountFieldName);\r\n    }\r\n\r\n    function getFieldDetails(address accountAddress, string accountFieldName) \r\n        public\r\n        view\r\n        checkIsColmnNameAllowed(accountFieldName)\r\n        checkReadingDataRestrictions(accountAddress)\r\n        returns(string data, string verificationStatusName, address verificationContractAddress, uint256 verifiedAt) {\r\n\r\n        AccountStorage accountStorage = getContext().getAccountStorage();\r\n        uint index = getFieldHistoryLength(accountAddress, accountFieldName);\r\n        \r\n        bytes memory dataKey = abi.encode(accountAddress, accountFieldName, index, metaDataKey);\r\n        data = accountStorage.getString(keccak256(dataKey));\r\n\r\n        bytes memory verificationContractKey = abi.encode(accountAddress, accountFieldName, index, metaVerificationContractKey);\r\n        verificationContractAddress = accountStorage.getAddress(keccak256(verificationContractKey));\r\n        if (verificationContractAddress != address(0)) {\r\n            BaseVerification verificationContract = BaseVerification(verificationContractAddress);\r\n            \r\n            verificationStatusName = verificationContract.getStatusName();\r\n            verifiedAt = verificationContract.verifiedAt();\r\n        }\r\n    }\r\n\r\n    function getLastFieldVerificationContractAddress(address accountAddress, string accountFieldName)\r\n        public view returns(address verificationContract) {\r\n        \r\n        uint index = getFieldHistoryLength(accountAddress, accountFieldName);\r\n        return getFieldVerificationContractAddress(accountAddress, accountFieldName, index);\r\n    }\r\n\r\n    function getFieldVerificationContractAddress(address accountAddress, string accountFieldName, uint index)\r\n        public\r\n        view\r\n        checkIsColmnNameAllowed(accountFieldName)\r\n        checkReadingDataRestrictions(accountAddress)\r\n        returns(address verificationContract) {\r\n        \r\n        bytes memory verificationContractKey = abi.encode(accountAddress, accountFieldName, index, metaVerificationContractKey);\r\n        verificationContract = getContext().getAccountStorage().getAddress(keccak256(verificationContractKey));\r\n    }\r\n\r\n    function getFieldLastMainData(address accountAddress, string accountFieldName)\r\n        public view returns(string data) {\r\n\r\n        uint index = getFieldHistoryLength(accountAddress, accountFieldName);\r\n        return getFieldMainData(accountAddress, accountFieldName, index);\r\n    }\r\n\r\n    function getFieldMainData(address accountAddress, string accountFieldName, uint index)\r\n        public\r\n        view\r\n        checkIsColmnNameAllowed(accountFieldName)\r\n        checkReadingDataRestrictions(accountAddress)\r\n        returns(string data) {\r\n\r\n        AccountStorage accountStorage = getContext().getAccountStorage();\r\n\r\n        bytes memory dataKey = abi.encode(accountAddress, accountFieldName, index, metaDataKey);\r\n        data = accountStorage.getString(keccak256(dataKey));\r\n    }\r\n\r\n    function getFieldLastVerificationData(address accountAddress, string accountFieldName)\r\n        public view returns(BaseVerification.Status verificationStatus, address verificationContractAddress, uint256 verifiedAt) {\r\n\r\n        uint index = getFieldHistoryLength(accountAddress, accountFieldName);\r\n        return getFieldVerificationData(accountAddress, accountFieldName, index);\r\n    }\r\n\r\n    function getFieldVerificationData(address accountAddress, string accountFieldName, uint index)\r\n        public\r\n        view\r\n        //checkIsColmnNameAllowed(accountFieldName)\r\n        //checkReadingDataRestrictions(accountAddress)// removed cause of same getFieldVerificationContractAddress restrictions\r\n        returns(BaseVerification.Status verificationStatus, address verificationContractAddress, uint256 verifiedAt) {\r\n\r\n        verificationContractAddress = getFieldVerificationContractAddress(accountAddress, accountFieldName, index);\r\n        BaseVerification verificationContract = BaseVerification(verificationContractAddress);\r\n        \r\n        verificationStatus = verificationContract.getStatus();\r\n        verifiedAt = verificationContract.verifiedAt();\r\n    }\r\n\r\n    function getIsFieldVerificationContractExist(address accountAddress, string accountFieldName, uint index)\r\n        //checkIsColmnNameAllowed(accountFieldName)\r\n        //checkReadingDataRestrictions(accountAddress)// removed cause of same getFieldVerificationContractAddress restrictions\r\n        external\r\n        view\r\n        returns(bool result) {\r\n        \r\n        address verificationContractAddress = getFieldVerificationContractAddress(accountAddress, accountFieldName, index);\r\n        return verificationContractAddress != address(0);\r\n    }\r\n\r\n    function setFieldLastVerificationContractAddress(\r\n        address accountAddress, string accountFieldName, address verificationContractAddress) public {\r\n\r\n        uint index = getFieldHistoryLength(accountAddress, accountFieldName);\r\n        setFieldVerificationContractAddress(accountAddress, accountFieldName, index, verificationContractAddress);\r\n    }\r\n\r\n    function setFieldVerificationContractAddress(\r\n        address accountAddress, string accountFieldName, uint index, address verificationContractAddress) \r\n        public\r\n        checkIsColmnNameAllowed(accountFieldName)\r\n        verificationContractOrOwnerOnly() {\r\n\r\n        KimlicContractsContext context = getContext();        \r\n        AccountStorage accountStorage = context.getAccountStorage();\r\n\r\n        bytes memory verificationContractKey = abi.encode(accountAddress, accountFieldName, index, metaVerificationContractKey);\r\n        accountStorage.setAddress(keccak256(verificationContractKey), verificationContractAddress);\r\n    }\r\n\r\n    function getFieldHistoryLength(address accountAddress, string accountFieldName)\r\n        public\r\n        view\r\n        checkIsColmnNameAllowed(accountFieldName)\r\n        returns(uint length){\r\n        \r\n        bytes memory fieldHistoryLengthKey = abi.encode(accountAddress, accountFieldName, lengthKey);\r\n        length = getContext().getAccountStorage().getUint(keccak256(fieldHistoryLengthKey));\r\n    }\r\n\r\n    function setRewardedAt(address accountAddress, uint milestone) public {\r\n        KimlicContractsContext context = getContext();\r\n        require(msg.sender == address(context.getRewardingContract()));\r\n\r\n        AccountStorage accountStorage = context.getAccountStorage();\r\n        bytes memory verificationContractKey = abi.encode(accountAddress, milestone, metaVerificationContractKey);\r\n        accountStorage.setUint(keccak256(verificationContractKey), block.timestamp);\r\n    }\r\n\r\n    function getRewardedAt(address accountAddress, uint milestone) public view returns(uint) {\r\n        bytes memory verificationContractKey = abi.encode(accountAddress, milestone, metaVerificationContractKey);\r\n        return getContext().getAccountStorage().getUint(keccak256(verificationContractKey));\r\n    }\r\n\r\n    /// private methods ///\r\n\r\n    function updateField(address accountAddress, string data, string accountFieldName) private {\r\n        \r\n        require(!isEqualStrings(data, \"\"));\r\n        uint index = getFieldHistoryLength(accountAddress, accountFieldName);\r\n\r\n        if (isEqualStrings(accountFieldName, \"device\")) {\r\n            require(index == 0);\r\n        }\r\n        string memory storedData = \"\";\r\n        AccountStorage accountStorage = getContext().getAccountStorage();\r\n\r\n        if (index > 0) {\r\n            bytes memory dataKey = abi.encode(accountAddress, accountFieldName, index, metaDataKey);\r\n            storedData = accountStorage.getString(keccak256(dataKey));\r\n        }\r\n\r\n        if (!isEqualStrings(storedData, data)) {\r\n            addNewFieldItem(accountAddress, data, accountFieldName);\r\n        }\r\n    }\r\n\r\n\r\n    function addNewFieldItem(address accountAddress, string data, string accountFieldName) private {\r\n\r\n        uint index = getFieldHistoryLength(accountAddress, accountFieldName) + 1;\r\n        \r\n        AccountStorage accountStorage = getContext().getAccountStorage();\r\n\r\n        bytes memory dataKey = abi.encode(accountAddress, accountFieldName, index, metaDataKey);\r\n        accountStorage.setString(keccak256(dataKey), data);\r\n        \r\n        bytes memory fieldHistoryLengthKey = abi.encode(accountAddress, accountFieldName, lengthKey);\r\n        accountStorage.setUint(keccak256(fieldHistoryLengthKey), index);\r\n    }\r\n\r\n    function isEqualStrings(string leftValue, string rightValue) private pure returns(bool isEqual){\r\n        isEqual = keccak256(bytes(leftValue)) == keccak256(bytes(rightValue));\r\n    }\r\n\r\n    modifier verificationContractOrOwnerOnly() {\r\n        KimlicContractsContext context = getContext();\r\n        require(\r\n            context.getVerificationContractFactory().createdContracts(msg.sender) ||\r\n            msg.sender == address(context.getVerificationContractFactory()) ||\r\n            msg.sender == context.owner(),\r\n            \"Access to this method allowed for verification contract, verification contract factory or account storage adapter owner only\");\r\n        _;\r\n    }\r\n\r\n    modifier checkReadingDataRestrictions(address account) {\r\n        KimlicContractsContext context = getContext();\r\n        require(\r\n            context.getVerificationContractFactory().createdContracts(msg.sender) ||\r\n            context.getProvisioningContractFactory().createdContracts(msg.sender) ||\r\n            msg.sender == address(context.getVerificationContractFactory()) ||\r\n            msg.sender == address(context.getRewardingContract()) ||\r\n            msg.sender == owner ||\r\n            msg.sender == context.owner() ||\r\n            msg.sender == account,\r\n            \"Access to this method not allowed from current account\");\r\n        _;\r\n    }\r\n\r\n    modifier checkIsColmnNameAllowed(string name) {\r\n        require(isAllowedFieldName(name), \"Provided field name is not allowed\");\r\n        _;\r\n    }\r\n}\r\n","abiDocs":[{"constant":true,"inputs":[{"name":"fieldName","type":"string"}],"name":"isAllowedFieldName","payable":false,"stateMutability":"view","type":"function","signature":"isAllowedFieldName(string)","signatureHash":"2b5dead1"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"index","type":"uint256"}],"name":"getFieldVerificationData","payable":false,"stateMutability":"view","type":"function","signature":"getFieldVerificationData(address,string,uint256)","signatureHash":"3babddf6"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"getFieldLastVerificationData","payable":false,"stateMutability":"view","type":"function","signature":"getFieldLastVerificationData(address,string)","signatureHash":"466f1b7b"},{"constant":false,"inputs":[{"name":"fieldName","type":"string"}],"name":"removeAllowedFieldName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"removeAllowedFieldName(string)","signatureHash":"70bbf518"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to relinquish control of the contract.\r","signature":"renounceOwnership()","signatureHash":"715018a6"},{"constant":false,"inputs":[{"name":"fieldName","type":"string"}],"name":"addAllowedFieldName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"public methods ///\r","signature":"addAllowedFieldName(string)","signatureHash":"78b9d4b2"},{"constant":false,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"verificationContractAddress","type":"address"}],"name":"setFieldLastVerificationContractAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setFieldLastVerificationContractAddress(address,string,address)","signatureHash":"7f6a027b"},{"constant":false,"inputs":[{"name":"data","type":"string"},{"name":"accountFieldName","type":"string"}],"name":"setFieldMainData","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setFieldMainData(string,string)","signatureHash":"849b177e"},{"constant":true,"inputs":[],"name":"owner","payable":false,"stateMutability":"view","type":"function","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"getFieldDetails","payable":false,"stateMutability":"view","type":"function","signature":"getFieldDetails(address,string)","signatureHash":"9590de3b"},{"constant":false,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"index","type":"uint256"},{"name":"verificationContractAddress","type":"address"}],"name":"setFieldVerificationContractAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setFieldVerificationContractAddress(address,string,uint256,address)","signatureHash":"9b7e6965"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"getFieldHistoryLength","payable":false,"stateMutability":"view","type":"function","signature":"getFieldHistoryLength(address,string)","signatureHash":"bbe78c1b"},{"constant":false,"inputs":[{"name":"accountAddress","type":"address"},{"name":"milestone","type":"uint256"}],"name":"setRewardedAt","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setRewardedAt(address,uint256)","signatureHash":"c05e88aa"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"index","type":"uint256"}],"name":"getIsFieldVerificationContractExist","payable":false,"stateMutability":"view","type":"function","signature":"getIsFieldVerificationContractExist(address,string,uint256)","signatureHash":"caf7043b"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"index","type":"uint256"}],"name":"getFieldVerificationContractAddress","payable":false,"stateMutability":"view","type":"function","signature":"getFieldVerificationContractAddress(address,string,uint256)","signatureHash":"ced001e6"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"},{"name":"index","type":"uint256"}],"name":"getFieldMainData","payable":false,"stateMutability":"view","type":"function","signature":"getFieldMainData(address,string,uint256)","signatureHash":"cfd00c49"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"getFieldLastMainData","payable":false,"stateMutability":"view","type":"function","signature":"getFieldLastMainData(address,string)","signatureHash":"d49dfda2"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"milestone","type":"uint256"}],"name":"getRewardedAt","payable":false,"stateMutability":"view","type":"function","signature":"getRewardedAt(address,uint256)","signatureHash":"d5899c01"},{"constant":false,"inputs":[{"name":"newOwner","type":"address","description":"The address to transfer ownership to.\r"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to transfer control of the contract to a newOwner.\r","signature":"transferOwnership(address)","signatureHash":"f2fde38b"},{"constant":true,"inputs":[{"name":"accountAddress","type":"address"},{"name":"accountFieldName","type":"string"}],"name":"getLastFieldVerificationContractAddress","payable":false,"stateMutability":"view","type":"function","signature":"getLastFieldVerificationContractAddress(address,string)","signatureHash":"f40650ce"},{"inputs":[{"name":"contextstorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event","signature":"OwnershipRenounced(address)","signatureHash":"f8df3114"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event","signature":"OwnershipTransferred(address,address)","signatureHash":"8be0079c"}]}
